package cn.kgc.base.chapter07.work;

import java.util.Scanner;

import cn.kgc.base.chapter05.demo.CheckUnit;

/**
 * @author 向远洋
 * 2024年12月11日 下午3:05:06
 * 吃货联盟订餐系统
 * 用户可以进行订餐、查看餐袋、签收订单、删除订单、点赞等操作
 */
public class OrderSystem {
	//菜品信息数量
	static int count = 3; 
	static int[] dishId = new int[count];
	static String[] dishName = new String[count];
	static String[] dishAddress = new String[count];
	static double[] dishPrice = new double[count];
	static int[] dishNumber = new int[count];
	static int[] dishPopular = new int[count];
	//订单信息
	static int orders = 2; //订单数量
	static int[] orderId = new int[count];
	static String[] orderTo = new String[count];
	static String[] orderName = new String[count];
	static String[] orderTelephone = new String[count];
	static int[] orderNumber = new int[count];
	static int[] orderTime = new int[count];
	static String[] orderAddress = new String[count];
	static double[] orderCost = new double[count];
	static int[] orderState = new int[count]; //完成状态
	static String[] orderRemark = new String[count];
	static int[] state = new int[count]; //点赞状态
	
	static final int showTips = 0, showDishs = 1, showOrders = 2; 
	static Scanner input = new Scanner(System.in);
	/**
	 * 主方法
	 * @param args
	 */
	public static void main(String[] args) {
		initialize();
		System.out.println("欢迎使用\"吃货联盟订餐系统\"");
		while(true) {
			printMes(showTips);
			if(!canOrder()) {
				System.out.println("商家不小心把商品都给下架了！");
				Exit();
			}
			int op = CheckUnit.checkIntRange(input, 1, 6);
			switch(op) {
				case 1: 
					order(); 
					break;
				case 2:
					System.out.println("***查看餐袋***");
					printMes(showOrders);
					break;
				case 3:
					sign();
					break;
				case 4:
					delete();
					break;
				case 5:
					press();
					break;
				case 6:
					Exit();
			}
		}
	}
	
	/**
	 * 初始系统数据
	 */
	static int over = 0; //偏移量，范围[0 ~ dishs.length - count], 可以通过偏移量来上架不同商品
	static String[] dishs = {"红烧带鱼", "鱼香肉丝", "时令蔬菜", "香辣烤鸭", "芋圆葡萄", "茉莉奶绿", "螺蛳粉"};
	static String[] address = {"岳阳理工学院店", "湖南理工学院二食堂", "湖南理工学院二食堂", "岳阳理工学院店", "蜜雪冰城", "蜜雪冰城", "岳阳理工二食堂"};
	static double[] prices = {38, 28, 18.8, 45.9, 9.9, 8, 13}; 
	static int[] popular = {10, 12, 4, 16, 30, 28, 79};
	static int[] number = {15, 15, 20, 10, 40, 40, 99};
	/**
	 * 初始化数据
	 */
	static void initialize() {
		for(int i = 0; i < count; i++) {
			//菜品
			dishId[i] = i + 1; //通过id找其他属性是要注意-1
			dishName[i] = dishs[i + over];
			dishAddress[i] = address[i + over];
			dishPrice[i] = prices[i + over];
			dishPopular[i] = popular[i + over];
			dishNumber[i] = number[i + over];
			//订单
			if(i < orders) { //即初始只有2条订单，即orders = 2
				orderId[i] = i + 1;
				orderTo[i] = "向远洋";
				orderName[i] = dishs[i];
				orderTelephone[i] = "12345678901";
				orderNumber[i] = i + 1; // i从0开始，但是商品数量不能为0 [0 对应 1， 后面通过序号找对应商品，应该-1]
				orderCost[i] = totalMoney(orderName[i], orderNumber[i]);
				orderTime[i] = 10;
				orderAddress[i] = "南五727";
				orderState[i] = i % 2; //0 1两种状态
				orderRemark[i] = "老板！加点饭！！！";
				state[i] = orderState[i]; //送达了才能点赞，未送达不能点赞
			}
		}
		
	}
	
	/**
	 * 集成打印函数，通过不同的操作符，输出不同信息
	 * @param op
	 */
	static void printMes(int op) {
		switch(op) {
			case showTips:
				System.out.println("****************************");
				System.out.println("1、我要订餐");
				System.out.println("2、查看餐袋");
				System.out.println("3、签收订单");
				System.out.println("4、删除订单");
				System.out.println("5、我要点赞");
				System.out.println("6、退出系统");
				System.out.println("****************************");
				System.out.print("请选择：");
				break;
			case showDishs:
				//编号、名称、地址、价格、赞数、库存
				System.out.println("=============================菜品信息====================================");
				System.out.printf("%-5s%-10s%-10s%-10s%-10s%-15s\n", "序号", "菜名", "单价", "赞数", "库存", "商家地址");
				for(int i = 0; i < count; i++) {
					System.out.printf("%-5d%-10s%-11s%-12s%-10d%-10s\n",
						dishId[i], dishName[i], (String.format("%.1f", dishPrice[i]) + "元"), (dishPopular[i] + "🖒 "), dishNumber[i], dishAddress[i]);
				}
				break;
			case showOrders:
				System.out.println("==================================================订单信息==========================================================");
				System.out.printf("%-5s%-10s%-10s%-10s%-10s%-10s%-10s%-15s%-10s%5s\n",
						"序号", "订餐人", "餐品信息", "送餐时间", "送餐地址", "总金额", "订单状态", "电话", "备注", "   ");
				for(int i = 0; i < orders; i++) { 
					if(orderName[i] != null) { //orderName是否为空判断订单是否存在，后序只需要通过设置orderName为null来判断订单是否存在
						System.out.printf("%-6d%-10s%-10s%-10s%-10s%-13s%-10s%-15s%-10s%5s\n",
							orderId[i], orderTo[i], (orderName[i] + "(" +orderNumber[i] + "份)"), 
							("" + orderTime[i] + "点 "), ("" + orderAddress[i]), ("" + String.format("%.1f", orderCost[i]) + "元"), 
							("" + getState(orderState[i])), ("" + orderTelephone[i]), ("" + orderRemark[i]), (state[i] == 0 ? "   " : "[已点赞]"));						
					}
				}
				break;
		}
	}
	
	/**
	 * 点餐
	 */
	static void order() {
		boolean isHave = true; //是否有库存
		while(true) {
			System.out.println("***我要订餐***");
			boolean isFull = false;
			isHave = true;
			int i;
			for(i = 0; i < count; i++) {
				if(orderName[i] == null) { //一个新订单产生，应该将该订单所有属性赋值。
					System.out.print("请输入订餐人姓名：");
					orderTo[i] = CheckUnit.checkString(input, 0);
					printMes(showDishs); //给出菜品信息展示给用户看
					System.out.print("请选择您要点的菜品编号:");
					int Mes = CheckUnit.checkIntRange(input, 1, count); //编号应该在[1~count]中，保证count>1
					orderId[i] = orders+1;
					System.out.print("请选择您要点的菜品数量:");
					orderNumber[i] = CheckUnit.checkIntRange(input, 1, getNumById(Mes)); //该函数提供了根据菜品编号找库存
					if(orderNumber[i] == -1) {
						isHave = false;
						break;
					}
					isFull = true;
					System.out.print("请输入送餐时间（送餐时间是10点至20点间整点送餐）:");
					orderTime[i] = CheckUnit.checkIntRange(input, 10, 20);
					System.out.print("请输入送餐地址:");
					orderAddress[i] = CheckUnit.checkString(input, 1);
					System.out.print("请输入电话号码:");
					orderTelephone[i] = CheckUnit.checkString(input, 2);
					System.out.print("请输入备注信息:");
					orderRemark[i] = CheckUnit.checkString(input, 1);
					orderState[i] = 0; //此时订单应该刚生成，设置为0
					orderName[i] = dishName[Mes - 1]; //-1是因为定义dishName时差异，可以查看初始化那一块
					orderCost[i] = orderNumber[i] * dishPrice[Mes - 1];
					//及时修改菜品信息
					dishNumber[Mes - 1] -= orderNumber[i];
					//如果可以下单（数组未满），只进行一次，不然一次下单占用多个order数组元素，及时break
					break;
				}
			}
			//订餐成功
			if(isFull) {
				double tip = Math.random() * 9 + 1;
				System.out.println("订餐成功！");
				System.out.println("---------------------");
				System.out.println("| " + orderName[i] + "(" + orderNumber[i] + "份)");
				System.out.println("---------------------");
				System.out.println("| 送餐时间：" + orderTime[i] + "点");
				System.out.println("---------------------");
				System.out.println("| 送餐地址：" + orderAddress[i]);
				System.out.println("---------------------");
				System.out.println("| 用户信息：" + orderTo[i].charAt(0) + "先生/女士(" + orderTelephone[i].substring(0, 3) + "****" + orderTelephone[i].substring(7, 11) + ")");
				System.out.println("---------------------");
				System.out.println("| 用户备注：" + orderRemark[i]);
				System.out.println("---------------------");
				int digit = 0;
				if(orderNumber[i] + tip + orderCost[i] >= 50) {
					digit = ((int)orderCost[i]/10); //减免，最多减免50
					if(digit > 50) {
						digit = 50;
					}
					System.out.printf("| 餐费：%.1f*(%d份)=%.1f元, 配送费%.1f元, 打包费%d元，平台消费超过%d元，赠送%d元减免卷！总计：%.1f元\n", 
							dishPrice[orderId[i] - 1], orderNumber[i], orderCost[i], tip, orderNumber[i], (int)orderCost[i], digit, (tip + orderCost[i] - digit));
				}
				else {
					System.out.printf("| 餐费：%.1f*(%d份)=%.1f元, 配送费%.1f元，总计：%.1f元\n", 
							dishPrice[orderId[i] - 1], orderNumber[i], orderCost[i], tip, (tip + orderCost[i]));				
				}
				orders++;
				orderCost[i] += (tip + orderNumber[i]);
				orderCost[i] -= digit; 
				System.out.println("---------------------");
				
			} else if(!isHave) {
				System.out.println("本次点餐失败！");
			} else {
				System.out.println("订餐失败，您的点餐车已满！");
			}
			System.out.println("是否继续点餐，输入n退出点餐 其他键继续点餐");
			String op = input.next();
			if(op.equals("n")) {
				return;
			}
		}
	}
	
	
	/**
	 * 签收订单
	 */
	static void sign() {
		System.out.println("***签收订单***");
		while(true) { 

			printMes(showOrders);
			System.out.print("请选择要签收的订单序号:");	
			int Id;
			Id = CheckUnit.checkInt(input);
			if(Id < 1 || Id > orders)
				System.out.println("签收失败！您选择的订单不存在！\n");
			else if(orderState[Id - 1] == 1) {
				System.out.println("签收失败！您已经签收过该定单了!\n");
			} else {
				System.out.println("签收成功！");
				orderState[Id - 1] = 1; 
			}
			System.out.println("是否要继续签收订单？按n退出签收订单，按其他则继续~");
			String Mes = input.next();
			if(Mes.equals("n")) {
				return;
			}
		}
	}
	
	/**
	 * 删除订单
	 */
	static void delete() {
		System.out.println("***删除定单***");
		while(true) { 
			if(orders == 0) {
				System.out.println("无订单进行删除！！！");
			}else {
				printMes(showOrders); 
				System.out.print("请输入要删除的订单序号:");
				int Id;
				Id = CheckUnit.checkInt(input);
				if(Id < 1 || Id > orders)
					System.out.println("删除失败！您选择的订单不存在！\n");
				else {
					move(Id - 1); // 执行删除操作
					System.out.println("删除成功！");
				}
			}
			System.out.println("是否要继续删除订单？按n退出签收订单，按其他则继续~");
			String Mes = input.next();
			if(Mes.equals("n") || Mes.charAt(0) == 'n') {
				return;
			}
		}
		
	}
	
	static void move(int idx) { //删除order数组信息，传参时记得传入订单序号对应下标（比如1号订单在order数组中下标为0）
		for(int i = idx + 1; i < orders; i++) { 
			orderTo[i-1] = orderTo[i];
			orderName[i-1] = orderName[i];
			orderTelephone[i-1] = orderTelephone[i];
			orderNumber[i-1] = orderNumber[i];
			orderTime[i-1] = orderTime[i];
			orderAddress[i-1] = orderAddress[i];
			orderCost[i-1] = orderCost[i];
			orderState[i-1] = orderState[i];
			orderRemark[i-1] = orderRemark[i];
			state[i-1] = state[i];
		}
		orders--;
		orderName[orders] = null; 
	}
	
	static void press() {
		System.out.println("***点赞订单***");
		while(true) {
			printMes(showOrders);
			System.out.print("请输入要点赞的订单序号:");
			int Id;
			Id = CheckUnit.checkInt(input);
			if(Id < 1 || Id > orders)
				System.out.println("点赞失败！您选择的订单不存在！\n");
			else if(state[Id - 1] == 1) {
				System.out.println("点赞失败！您已经赞过该定单了!");
				System.out.println("您要取消点赞吗？取消请按n,按其他则保留该赞~");
				String Mes = input.next();
				if(Mes.equals("n")) {
					state[Id-1] = 0;
				}
			} else {
				System.out.println("点赞成功！");
				state[Id - 1] = 1; //点赞后记得修改状态， 同时表示订单已完成
				orderState[Id - 1] = 1;
			}
			System.out.println("是否要继续点赞订单？按n退出点赞界面，按其他则继续~");
			String Mes = input.next();
			if(Mes.equals("n")) {
				return;
			}
		}
	}
	
	static int getNumById(int id) {
		return dishNumber[id - 1];
	}
	
	static double totalMoney(String str, int num) {
		//找到str菜品在dishs数组的下标，从而找到对应得到价格prices
		int idx = 0;
		for(int i = 0; i < dishs.length; i++) {
			if(str.equals(dishs[i])) {
				idx = i;
				break;
			}
		}
		return ((double)prices[idx] * num);
	}
	
	static String getState(int state) {
		return (state == 0 ? "未完成" : "已完成");
	}
	
	static boolean canOrder() {
		boolean hasCount = false;
		for(int i = 0; i < count; i++) {
			if(dishName[i] != null) 
				hasCount = true;
		}
		return hasCount;
	}
	static void Exit() {
		input.close();
		System.out.println("欢迎下次");
		System.exit(0);
	}
}

